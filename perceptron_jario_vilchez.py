# -*- coding: utf-8 -*-
"""PERCEPTRON-jario-vilchez.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xIY4bICM1et1gHZKzW1AzNGIfKOaNRBE
"""

import numpy as np

# Definición de la función de activación (función escalón)
def funcion_activacion(y):
    return 1 if y >= 0 else 0

# Algoritmo de entrenamiento basado en el algoritmo de la imagen
def algoritmo_entrenamiento(X, D, alpha, max_epochs=100):
    n, m = X.shape  # n = número de ejemplos, m = número de características
    W = np.random.uniform(-1, 1, m)  # Inicializar los pesos en valores aleatorios pequeños [-1, 1]
    theta = np.random.uniform(-1, 1)  # Inicializar el umbral aleatoriamente

    for epoch in range(max_epochs):
        total_error = 0
        for i in range(n):
            # Propagar: calcular Y en función de X
            Y = np.dot(X[i], W) - theta
            y_pred = funcion_activacion(Y)

            # Calcular el error
            error = D[i] - y_pred
            total_error += abs(error)

            # Retropropagar: ajustar los pesos y el umbral
            W += alpha * error * X[i]
            theta -= alpha * error

        # Imprimir el error total de cada época
        print(f"Época {epoch+1}, Error Total: {total_error}")

        # Condición de parada si el error total es aceptable (en este caso, cero)
        if total_error == 0:
            print("Entrenamiento completo.")
            break

    return W, theta

# Ejemplo de uso
if __name__ == "__main__":
    # Datos de entrenamiento (X) y salidas deseadas (D)
    X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  # Entradas para una compuerta XOR
    D = np.array([0, 1, 1, 0])  # Salidas deseadas para compuerta XOR
    alpha = 0.1  # Coeficiente de aprendizaje

    # Entrenar el modelo
    W, theta = algoritmo_entrenamiento(X, D, alpha)

    # Prueba del modelo entrenado
    print("\nPrueba del modelo entrenado:")
    for i in range(len(X)):
        Y = np.dot(X[i], W) - theta
        y_pred = funcion_activacion(Y)
        print(f"Entrada: {X[i]}, Salida esperada: {D[i]}, Salida obtenida: {y_pred}")
    print("Pesos entrenados:", W)
    print("Umbral entrenado:", theta)